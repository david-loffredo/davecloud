---
- name: bacula client packages are installed
  package:
    state: present
    name:
      - bacula-client

- name: bacula password has real value
  fail: msg="Set bacula_client_pw to a real value"
  when: bacula_client_pw == "changeme"
    
- name: bacula client config file
  template:
    src: bacula-fd.conf.j2
    dest: /etc/bacula/bacula-fd.conf
  notify:
    - restart bacula client

- name: bacula working directory present
  file: state=directory path="{{ bacula_client_workdir }}"
    owner=root group=bacula mode=0770

## Since the client is in the cloud and our director will likely be
## NATed and behind a firewall, we leave the Bacula ports blocked on
## the client and have the director set up an ssh tunnel.  Set up a
## restricted backup account with a separate key just to set up the
## tunnel to port 9102.
## 
- name: bacula tunnel account present
  user:
    name: "{{ bacula_tunnel_acct }}"
    group: "{{ bacula_tunnel_group }}"
    state: present
    password: "{{ bacula_tunnel_passwd }}"
      
- name: bacula tunnel has authorized keys
  authorized_key:
    user: "{{ bacula_tunnel_acct }}"
    key:  "{{ bacula_tunnel_sshpub }}"

# This is symbolic name passed by the director to the client that
# needs to resolve to the storage machine.  Since we are working over
# a tunnel this must not resolve to anything real so we put an entry
# in /etc/hosts to map it to 127.0.0.1
#
# NOTE - Looking at other hostvars, so use the backula_default_*
# variables if something is missing.  See bacula_common for more
# discussion.
#
# This list could be functionally built but the jinja version in
# ansible does not support the default= argument to map yet.  Just
# build the list procedurally.
#
# with_items: "{{ groups['backup-server'] | map('extract', hostvars) |
#   map(attribute='storage_host', default=dft_var) | unique | list }}"
# 
- name: tunneled storage director resolves to loopback
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ item }}$'
    line: "127.0.0.1 {{ item }}"
    state: present
  with_items: >-
    {%- set ns = namespace(sds=[]) -%}
    {%- for i in groups['backup-server'] -%}
    {{- ns.sds.append( hostvars[i].bacula_storage_host |
        default(bacula_default_storage_host) )  -}}
    {%- endfor -%}
    {{- ns.sds | unique -}}
        
    
# RedHat and Suse would also need stuff in sysconfig

- name: bacula client service enabled
  service: name=bacula-fd enabled=yes

- name: bacula client service started
  service: name=bacula-fd state=started
    
