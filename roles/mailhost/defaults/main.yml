---
#==============================
# DEFAULTS NEEDED BY MANY ROLES
#
# Directories and such used by other roles (backup, etc) so set by the
# separate mail-dflts role.
#
#mail_server_hostname:
#mail_spool_root:
#mail_db_root:
#mail_sieve_root:
#mail_dkim_root:


#==============================
# DEFAULTS NEEDED BY ONLY THIS ROLE
#
# Networks with relaxed checking, ignored by fail2ban, allowed to
# relay mail, etc
friendly_networks: []

mail_cfg_dir: /etc/postfix

# mailboot script generated by the cryptdir role
cryptdir_boot_script: /usr/sbin/mailboot
cryptdir_boot_services:
  - postfix
  - dovecot
  - redis-server
  - rspamd

# Postfix runs in a chroot to this directory, which houses the mail
# queue.  If we use LUKS for an encrypted data disk, move the queue
# to {{mail_private_dir}} to further protect messages in transit.
#
# When postfix starts it calls /usr/lib/postfix/configure-instance.sh
# to either build the chroot or refresh it with the latest versions of
# all libraries, so any security patches are continually applied.
#
mail_queue_default_dir: /var/spool/postfix
mail_queue_dir: >-
  {% if cryptdir_type == 'luks' -%}
  {{cryptdir_root}}/postfix
  {%- else -%}
  {{mail_queue_default_dir}}
  {%- endif -%}

# Mail database
mail_db_util:   /usr/bin/mailcfg
mail_db_name:   maildb.sqlite3
mail_db:        "{{ mail_db_root }}/{{ mail_db_name }}"

# These are local addresses that are aliased to the administrative
# email address for every domain.
mail_local_admin_aliases:
  - root
  - postmaster
  - webmaster
  - security
  - abuse

# Use jinja2 to build list of aliases for each host domains
mail_admin_aliases: >-
  {%- set ns = namespace(lst=[], src='', dst=admin_email) -%}
  {%- for dom in mail_domains -%}
  {%- for user in mail_local_admin_aliases -%}
  {%- set ns.src=[user,dom]|join('@') -%}
  {%- if ns.src != ns.dst -%}
  {{- ns.lst.append({ 'src': ns.src, 'dst': ns.dst }) -}}
  {%- endif -%}
  {%- endfor -%}
  {%- endfor -%}
  {{- ns.lst -}}

mail_aliases: []
  
# Normally rspamd, but can disable by setting to empty
spam_filter: rspamd
spam_per_user_bayes: yes

spam_filter_is_set: "{{ 
  spam_filter|default(none) is not none and 
  spam_filter|string|length > 0 }}"
  
# redis is used by rspamd.  By default, redis now binds only to
# localhost.   
redis_maxmen: 500mb
# default policy is noeviction, rspamd docs warn against evicting
# volatile data.  Not setting at the moment.
# redis_maxmen_policy: 



# Will do DKIM signing if the selector is set.  Usually follow a year
# month pattern (202001) so that we have a predictable pattern when we
# rotate them.  When near rotation time, we can set the selector_next
# var to pre-generate the keys, but do not use them.  This gives us a
# chance to get the public keys into DNS and let them propogate.
#
dkim_selector:
dkim_selector_next:

# utility variables to simplify the templates
dkim_selector_is_set: "{{ 
  dkim_selector|default(none) is not none and 
  dkim_selector|string|length > 0 }}"

dkim_selector_next_is_set: "{{ 
  dkim_selector_next|default(none) is not none and 
  dkim_selector_next|string|length > 0 }}"

dkim_keysize: 2048

#========================================
# For quick reimaging, the 'snapshot' tag will copy locally unique
# system data (like keys and certs) to the following directory, where
# it will be restored if present as part of a normal run. Afterwards,
# you can use bacula to restore any user data, like the mail spool.
#
snapshot_dir: "{{playbook_dir}}/snapshot/{{inventory_hostname}}"

