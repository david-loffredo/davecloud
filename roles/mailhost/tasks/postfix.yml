---
# Debian 10 versions
# postfix       3.4.7


# The virtual user database holds account details.  We use SQLite
# because this small, simple, and relatively static, but you can use
# MySQL, Maria, or Postgres if you prefer.  I've written the mailcfg
# perl utility to manage the database.  It uses DBI and might just
# need minor changes to the connect statement and SQL for use with
# other RDBs.
- name: postfix and related packages present
  package:
    state: present
    name:
      - postfix
      - postfix-sqlite
      - libdbi-perl
      - libdbd-sqlite3-perl

#      - postfix-pcre
#      - postgrey
#      - python-psycopg2


# Do not start postfix at boot, Wait until the encrypted spool is
# mounted.  Our "mailboot" script mounts and starts.  This should run
# "sudo update-rc.d postfix disable" and change the postfix links from
# rc3.d/ and rc5.d/S01postfix to the equivalent K links.
#
- name: postfix not started at boot
  service: name=postfix enabled=no
    
- name: mail account utilities present
  template: src={{ item }}.j2 dest={{ mail_cfg_dir }}/{{ item }}
    owner=root group=root mode=0755
  with_items:
    - mailboot
    - mailcfg



# Restore snapshot from existing machine if needed
- name: check for mail database backup
  become: False
  local_action:
    stat path="{{snapshot_dir}}/{{ mail_db_name }}"
  register: mail_db_backup

- name: restore mail database backup
  copy:
    src: "{{snapshot_dir}}/{{ mail_db_name }}"
    dest: "{{ mail_db }}"
    owner: root
    group: root
    mode: 0644
  when: mail_db_backup.stat.exists == true

    

    
# The database directory should have been created and encrypted by the
# encfs.yml playbook.
- name: mail account database present
  command: "{{ mail_db_util }} adddom {{ item }}"
  register: result
  changed_when: result.stdout != ""  
  with_items: "{{ mail_domains }}"

- name: mail users present
  command: "{{ mail_db_util }} adduser {{ item.email }} {{ item.pw }}"
  register: result
  changed_when: result.stdout != ""  
  with_items: "{{ mail_users }}"
  
- name: mail aliases present
  command: "{{ mail_db_util }} addalias {{ item.src }} {{ item.dst }}"
  register: result
  changed_when: result.stdout != ""  
  with_items: "{{ mail_aliases }}"
  
- name: mail config templates present
  template: src="postfix/{{item}}" dest="{{mail_cfg_dir}}/{{item}}"
    owner=root group=root mode=0644
  with_items:
    - main.cf
    - master.cf
    - sqlite-virtual-alias-maps.cf
    - sqlite-virtual-mailbox-domains.cf
    - sqlite-virtual-mailbox-maps.cf
  notify: restart postfix


# This strips outgoing mail headers
# - name: Create postfix maps directory
#   file: path=/etc/postfix/maps state=directory owner=root group=root

# - name: Copy smtp_header_checks.pcre
#   copy: src=etc_postfix_maps_smtp_header_checks.pcre dest=/etc/postfix/maps/smtp_header_checks.pcre owner=root group=root
  

- name: certbot post-renew hook to reload postfix
  copy:
    content: "#!/bin/bash\n\nservice postfix reload\n"
    dest: /etc/letsencrypt/renewal-hooks/post/postfix
    owner: root
    group: root
    mode: 0755
