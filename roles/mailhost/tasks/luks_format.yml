---
# Not idempotent, but we put it into its own file and dynamically
# include it only when we need to initialize an encrypted partition.

# Initialize the block device for luks encruption
- name: confirm format partition
  pause:
    prompt: |-
      WARNING WARNING WARNING WARNING WARNING WARNING
      WARNING WARNING WARNING WARNING WARNING WARNING
      {{luks_device}} does not contain a LUKS partition
      
      Do LUKS format on {{luks_device}}?
      This will overwrite all data on {{luks_device}}
      
      Type "yes" to continue, anything else will stop.
  register: format_confirm_test
  failed_when: format_confirm_test.user_input != "yes"

# Initializes the partition
- name: "{{ luks_device }} initialized as LUKS partition"
  shell: printf '{{ mail_spool_pw }}' |
        cryptsetup luksFormat --batch-mode --verbose {{ luks_device }} - 

# Creates mapping in /dev/mapper/foo
- name: "{{ luks_device }} mapped as {{ luks_mapname }}"
  shell: printf '{{ mail_spool_pw }}' |
        cryptsetup luksOpen --batch-mode -d - {{luks_device}} {{luks_mapname}}

# zero out the disk to initialize it  would /dev/urandom be better?
# dd if=/dev/zero of=/dev/mapper/foo
- name: "mapped {{ luks_mapname }} zeroed out, may take a while"
  command: dd if=/dev/zero of=/dev/mapper/{{ luks_mapname }}
  failed_when: false
  
# create the filesystem
# mkfs.ext4 /dev/mapper/foo
- name: "mapped {{ luks_mapname }} ext4 filesystem present"
  command: mkfs.ext4 /dev/mapper/{{ luks_mapname }}

    
