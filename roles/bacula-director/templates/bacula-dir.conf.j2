#
# Bacula Director Configuration
#
Director {
  Name = {{ bacula_director_name }}
  DIR Port = {{ bacula_director_port }}
  Query File = {{ bacula_director_query_file }}
  Working Directory = {{ bacula_director_workdir }}
  Pid Directory = {{ bacula_director_piddir }}
  Maximum Concurrent Jobs = {{ bacula_director_max_jobs }}
  Password = "{{ bacula_console_pw }}"
  Messages = Standard
}

# We use combine everything done on a particular day into one volume
# and define monthly, weekly, and daily pools with appropriate
# retention periods.  Some people do a pool per client, but I prefer
# just one common set.

Schedule {
  Name = "MonthlyCycle"
  Run = Level=Full Pool=Monthly 1st sun at 1:05
  Run = Level=Differential Pool=Weekly 2nd-5th sun at 1:05
  Run = Level=Incremental Pool=Daily mon-sat at 1:05
}

# The bacula docs only list user/password but all examples use
# dbuser/dbpassword.  Checked the source and both are accepted.
# However name and dbname are two different things.
#
Catalog {
  Name = MyCatalog
  dbname = "bacula"
{% if bacula_db == 'sqlite3' %}
  dbuser = ""
  dbpassword = ""
{% else %}
  dbuser = "bacula"
  dbpassword = "{{bacula_db_pw}}"
{% endif %}
}


# STORAGE DAEMONS ------------------------------

# This is symbolic name passed by the director to the client that
# needs to resolve to the storage machine.  Since we are working over
# a tunnel this must not resolve to anything real so we put an entry
# in /etc/hosts to map it to 127.0.0.1
Storage {
  Name = File
  Address = {{ bacula_storage_host }}
  Password = "{{ bacula_storage_pw }}"
  Device = FileStorage
  Media Type = File
}

# Reasonable message delivery -- send most everything to
#   the email address and to the console
Messages {
  Name = Standard
  mail = root@localhost = all, !skipped, !terminate
  operator = root@localhost = mount
  console = all, !skipped, !saved
}
{%- if 0 -%}
Messages {
  Name = Standard
#
# NOTE! If you send to two email or more email addresses, you will need
#  to replace the %r in the from field (-f part) with a single valid
#  email address in both the mailcommand and the operatorcommand.
#  What this does is, it sets the email address that emails would display
#  in the FROM field, which is by default the same email as they're being
#  sent to.  However, if you send email to more than one address, then
#  you'll have to set the FROM address manually, to a single address.
#  for example, a 'no-reply@mydomain.com', is better since that tends to
#  tell (most) people that its coming from an automated source.

#
  mailcommand = "/usr/sbin/bsmtp -h localhost -f \"\(Bacula\) \<%r\>\" -s \"Bacu
la: %t %e of %c %l\" %r"
  operatorcommand = "/usr/sbin/bsmtp -h localhost -f \"\(Bacula\) \<%r\>\" -s \"
Bacula: Intervention needed for %j\" %r"
  mail = root = all, !skipped
  operator = root = mount
  console = all, !skipped, !saved

#
# WARNING! the following will create a file that you must cycle from
#          time to time as it will grow indefinitely. However, it will
#          also keep all your messages if they scroll off the console.
#
  append = "/var/log/bacula/bacula.log" = all, !skipped
  catalog = all
}
{% endif %}

# Default pool definition
# We may want to switch to VirtualFull and just always do incrementals
# or differentials, since that may be more network efficient.
Pool {
  Name = Default
  Pool Type = Backup
  Storage = File
}

Pool {
  Name = Monthly
  Pool Type = Backup
  Recycle = yes # automatically recycle Volumes
  AutoPrune = yes # Prune expired volumes
  Volume Retention = 6 months
  Label Format = Monthly-
  Volume Use Duration = 14 days
}

Pool {
  Name = Weekly
  Pool Type = Backup
  Recycle = yes
  AutoPrune = yes
  Volume Retention = 40 days
  Label Format = Weekly-
  Volume Use Duration = 6 days
}

Pool {
  Name = Daily
  Pool Type = Backup
  Recycle = yes # automatically recycle Volumes
  AutoPrune = yes # Prune expired volumes
  Volume Retention = 10 days
  Label Format = Daily-
  Volume Use Duration = 23h
}

{%- if 0 -%}
# Backup the catalog database (after the nightly save)
Job {
  Name = "BackupCatalog"
  JobDefs = "DefaultJob"
  Level = Full
  FileSet="Catalog"
  Schedule = "WeeklyCycleAfterBackup"
  # This creates an ASCII copy of the catalog
  # Arguments to make_catalog_backup.pl are:
  #  make_catalog_backup.pl <catalog-name>
  RunBeforeJob = "/etc/bacula/scripts/make_catalog_backup.pl MyCatalog"
  # This deletes the copy of the catalog
  RunAfterJob  = "/etc/bacula/scripts/delete_catalog_backup"
  Write Bootstrap = "/var/lib/bacula/%n.bsr"
  Priority = 11                   # run after main backup
}
{%- endif -%}


# CLIENT JOBS ========================================
#
{% for i in bacula_clients %}
@/etc/bacula/{{hostvars[i].inventory_hostname_short}}-job.conf
{% endfor %}
