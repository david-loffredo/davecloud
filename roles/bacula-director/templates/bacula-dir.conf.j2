#
# Bacula Director Configuration
#
Director {
  Name = {{ bacula_director_name }}
  DIR Port = {{ bacula_director_port }}
  Query File = {{ bacula_director_query_file }}
  Working Directory = {{ bacula_director_workdir }}
  Pid Directory = {{ bacula_director_piddir }}
  Maximum Concurrent Jobs = {{ bacula_director_max_jobs }}
  Password = "{{ bacula_console_pw }}"
  Messages = Standard
}

# We use combine everything done on a particular day into one volume
# and define monthly, weekly, and daily pools with appropriate
# retention periods.  Some people do a pool per client, but I prefer
# just one common set.

Schedule {
  Name = "MonthlyCycle"
  Run = Level=Full Pool=Monthly 1st sun at 1:05
  Run = Level=Differential Pool=Weekly 2nd-5th sun at 1:05
  Run = Level=Incremental Pool=Daily mon-sat at 1:05
}

# The bacula docs only list user/password but all examples use
# dbuser/dbpassword.  Checked the source and both are accepted.
# However name and dbname are two different things.
#
Catalog {
  Name = MyCatalog
  dbname = "bacula"
{% if bacula_db == 'sqlite3' %}
  dbuser = ""
  dbpassword = ""
{% else %}
  dbuser = "bacula"
  dbpassword = "{{bacula_db_pw}}"
{% endif %}
}


# STORAGE DAEMONS ------------------------------

# This is symbolic name passed by the director to the client that
# needs to resolve to the storage machine.  Since we are working over
# a tunnel this must not resolve to anything real so we put an entry
# in /etc/hosts to map it to 127.0.0.1
Storage {
  Name = File
  Address = {{ bacula_storage_host }}
  Password = "{{ bacula_storage_pw }}"
  Device = FileStorage
  Media Type = File
}

# Reasonable message delivery -- send most everything to
#   the email address and to the console
Messages {
  Name = Standard
  mailcommand = "/usr/sbin/bsmtp -h localhost -s \"%t %e - %c %l\" %r"
  mail = root@localhost = all, !skipped, !terminate

  operatorcommand = "/usr/sbin/bsmtp -h localhost -s \"Bacula: Intervention needed for %j\" %r"
  operator = root@localhost = mount
  console = all, !skipped, !saved

# Creates a log file that will need to be rotated
#append = "/var/log/bacula/bacula.log" = all, !skipped
}


# Default pool definition
# We may want to switch to VirtualFull and just always do incrementals
# or differentials, since that may be more network efficient.

# Limit volume sizes to 2gb so we don't need 64bit capable tools or
# file systems for moving them around.  Not a big problem anymore but
# one less thing to worry about if things go south.
Pool {
  Name = Default
  Pool Type = Backup
  Storage = File
}

Pool {
  Name = Monthly
  Pool Type = Backup
  Recycle = yes # automatically recycle Volumes
  AutoPrune = yes # Prune expired volumes
  Volume Retention = 6 months
  Label Format = Monthly-
  Volume Use Duration = 14 days
  Maximum Volume Bytes = 2gb
}

Pool {
  Name = Weekly
  Pool Type = Backup
  Recycle = yes
  AutoPrune = yes
  Volume Retention = 40 days
  Label Format = Weekly-
  Volume Use Duration = 6 days
  Maximum Volume Bytes = 2gb
}

Pool {
  Name = Daily
  Pool Type = Backup
  Recycle = yes # automatically recycle Volumes
  AutoPrune = yes # Prune expired volumes
  Volume Retention = 10 days
  Label Format = Daily-
  Volume Use Duration = 23h
  Maximum Volume Bytes = 2gb
}

{%- if 0 -%}

# Catalog pool definition
Pool {
  Name = Catalog
  Pool Type = Backup
  Recycle = yes                     # Bacula can automatically recycle Volumes
  AutoPrune = yes                   # Prune expired volumes
  Storage = File
  Volume Retention = 10 days
  Maximum Volume Bytes = 2gb
  Volume use Duration = 5 hours
  LabelFormat = "CAT-"
  Recycle oldest volume = yes
  Recycle current volume = yes
  maximum volumes = 30
}

# Backup the catalog database (after the nightly save)
Job {
  Name = "BackupCatalog"
  JobDefs = "DefaultJob"
  Level = Full
  FileSet="Catalog"
  Schedule = "WeeklyCycleAfterBackup"
  # This creates an ASCII copy of the catalog
  # Arguments to make_catalog_backup.pl are:
  #  make_catalog_backup.pl <catalog-name>
  RunBeforeJob = "/etc/bacula/scripts/make_catalog_backup.pl MyCatalog"
  # This deletes the copy of the catalog
  RunAfterJob  = "/etc/bacula/scripts/delete_catalog_backup"
  Write Bootstrap = "/var/lib/bacula/%n.bsr"
  Priority = 11                   # run after main backup
}
{%- endif -%}


# CLIENT JOBS ========================================
#
{% for i in bacula_clients %}
@/etc/bacula/{{hostvars[i].inventory_hostname_short}}-job.conf
{% endfor %}
